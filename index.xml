<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flow</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Flow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Dec 2019 14:36:56 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>编写 Dockerfile 的最佳实践</title>
      <link>http://localhost:1313/2019/12/%E7%BC%96%E5%86%99-dockerfile-%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 13 Dec 2019 14:36:56 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/%E7%BC%96%E5%86%99-dockerfile-%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>Docker 能使用 Dockerfile 文件自动化编译镜像。Dockerfile 是一个文本文件，由指令集组成。 一般准则和建议 容器应该是短暂的 Dockerfile 产生的容器，应该是尽可能短暂</description>
    </item>
    
    <item>
      <title>Codecombat私服搭建</title>
      <link>http://localhost:1313/2019/11/codecombat%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 14 Nov 2019 11:09:29 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/codecombat%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</guid>
      <description>1. docker compose version: &amp;#34;3.5&amp;#34; services: blog: image: operepo/ope-codecombat restart: always container_name: codecombat ports: - &amp;#34;8086:3000&amp;#34; ２．访问地址 http://127.0.0.1:8086 3. 解锁订阅 docker exec -it codecombat /bin/bash mongo use coco db.users.update({&amp;#39;name&amp;#39;:&amp;#39;lingfohn&amp;#39;},{$set:{&amp;#39;earned.gems&amp;#39;:100, permissions:[&amp;#34;godmode&amp;#34;,&amp;#34;admin&amp;#34;]}},true,false); exit exit</description>
    </item>
    
    <item>
      <title>一文读懂cgroup</title>
      <link>http://localhost:1313/2019/10/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82cgroup/</link>
      <pubDate>Thu, 17 Oct 2019 14:02:49 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/10/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82cgroup/</guid>
      <description>Linux Cgroups （Control Groups）提供了对一组进程及将来子进程的资源限制、控制和统计的能力；这些资源包括CPU、内存、存储、网络等。每种资源</description>
    </item>
    
    <item>
      <title>编写了一个Typora主题</title>
      <link>http://localhost:1313/2019/10/%E7%BC%96%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAtypora%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Wed, 09 Oct 2019 23:25:43 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/10/%E7%BC%96%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAtypora%E4%B8%BB%E9%A2%98/</guid>
      <description>今天搜到了一款Markdown编辑器Mark Text,编辑功能跟Typora不相上下。也是所见所得的Markdown编辑器，而且是开源免费的</description>
    </item>
    
    <item>
      <title>在Markdown中使用终端动画</title>
      <link>http://localhost:1313/2019/09/%E5%9C%A8markdown%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Mon, 30 Sep 2019 11:02:37 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/%E5%9C%A8markdown%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%8A%A8%E7%94%BB/</guid>
      <description>在写文章的时候，插入一些命令行代码。而命令的执行返回结果很难表现。如果用动画的方式，那么也不错的。使用termtosvg工具，它能够将命令行</description>
    </item>
    
    <item>
      <title>初探之 sync.Once</title>
      <link>http://localhost:1313/2019/09/%E5%88%9D%E6%8E%A2%E4%B9%8B-sync.once/</link>
      <pubDate>Sun, 29 Sep 2019 09:45:53 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/%E5%88%9D%E6%8E%A2%E4%B9%8B-sync.once/</guid>
      <description>sync.Once 是 Golang package 中使方法只执行一次的对象实现，作用与 init 函数类似。但也有所不同。 init 函数是在文件包首次被加载的时候执行，且只执行一次 sync.Onc 是在代码运行中需要</description>
    </item>
    
    <item>
      <title>Vue Ls插件介绍</title>
      <link>http://localhost:1313/2019/09/vue-ls%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 17 Sep 2019 09:28:43 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/vue-ls%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/</guid>
      <description>Vue插件，用于从Vue上下文中使用本地Storage，会话Storage和内存Storage。一个vue封装的本地储存的方法。 安装 Npm $ npm install</description>
    </item>
    
    <item>
      <title>[ redis系列 ] 02| Redis常见使用场景</title>
      <link>http://localhost:1313/2019/09/redis%E7%B3%BB%E5%88%97-02-redis%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Thu, 12 Sep 2019 16:14:56 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/redis%E7%B3%BB%E5%88%97-02-redis%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>分布式缓存 缓存数据模型特征： 命中率 命中率=返回正确结果数/请求缓存次数，命中率问题是缓存中的一个非常重要的问题，它是衡量缓存有效性的重要指标</description>
    </item>
    
    <item>
      <title>[ redis系列 ] 03| Redis使用常见问题及解决方案</title>
      <link>http://localhost:1313/2019/09/redis%E7%B3%BB%E5%88%97-03-redis%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 12 Sep 2019 15:25:09 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/redis%E7%B3%BB%E5%88%97-03-redis%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>Redis为什么能够支持如此高的并发呢？ 纯内存访问 将所有数据都放到内存中,内存响应时间为100纳秒，是redis达到每秒万级别访问的重要基础</description>
    </item>
    
    <item>
      <title>[ redis系列 ] 01| docker 安装redis 以及配置连接</title>
      <link>http://localhost:1313/2019/09/redis%E7%B3%BB%E5%88%97-01-docker-%E5%AE%89%E8%A3%85redis-%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 11 Sep 2019 17:41:24 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/redis%E7%B3%BB%E5%88%97-01-docker-%E5%AE%89%E8%A3%85redis-%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5/</guid>
      <description>拉取镜像 $ docker pull redis:5.0.5 安装镜像 本来按照流程来的，直接docker run就行了，但是肯定需要配置一点东西么， mkdir -p /Users/lingfohn/Workspaces/AntdAdmin/redis 这个时候直接去网上找个redis.</description>
    </item>
    
    <item>
      <title>Chart编写踩坑</title>
      <link>http://localhost:1313/2019/09/chart%E7%BC%96%E5%86%99%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Fri, 06 Sep 2019 14:41:25 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/chart%E7%BC%96%E5%86%99%E8%B8%A9%E5%9D%91/</guid>
      <description>常用调试命令 --dry-run 渲染模板，但是不安装chart --debug Debug 模式 内置对象 Release对象 这个对象描述了 release 本身。 对象名 含义 Release.Name release 名称 Release.Time release 的时间（？什么时间</description>
    </item>
    
    <item>
      <title>Cobra 包介绍</title>
      <link>http://localhost:1313/2019/09/cobra-%E5%8C%85%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 05 Sep 2019 15:01:39 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/cobra-%E5%8C%85%E4%BB%8B%E7%BB%8D/</guid>
      <description>Cobra 包介绍 Cobra 是一个 Golang 包，它提供了简单的接口来创建命令行程序。同时，Cobra 也是一个应用程序，用来生成应用框架，从而开发以 Cobra 为基础的应用。 主要</description>
    </item>
    
    <item>
      <title>Linux Shell编程之条件判断与流程控制</title>
      <link>http://localhost:1313/2019/09/linux-shell%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 03 Sep 2019 08:49:10 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/linux-shell%E7%BC%96%E7%A8%8B%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>一、条件判断式语句 1.1 按照文件类型进行判断 测试选项 作用 -b 文件 判断该文件是否存在，并且是否为块设备文件（是块设备文件为真） -c 文件 判断该文件是否存</description>
    </item>
    
    <item>
      <title>使用typora打造属于自己的知识库</title>
      <link>http://localhost:1313/2019/08/%E4%BD%BF%E7%94%A8typora%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BA%93/</link>
      <pubDate>Sat, 31 Aug 2019 08:37:21 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/%E4%BD%BF%E7%94%A8typora%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E5%BA%93/</guid>
      <description>找同事问一个问题，看他打开自己的云笔记本搜索了一番。看到他的笔记本，分门别类，满满的都是干货。当时就感觉自愧不如，自己工作这么多年，现在回顾</description>
    </item>
    
    <item>
      <title>Hugo主题even文章样式预览</title>
      <link>http://localhost:1313/2019/08/hugo%E4%B8%BB%E9%A2%98even%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E9%A2%84%E8%A7%88/</link>
      <pubDate>Fri, 30 Aug 2019 15:10:18 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/hugo%E4%B8%BB%E9%A2%98even%E6%96%87%E7%AB%A0%E6%A0%B7%E5%BC%8F%E9%A2%84%E8%A7%88/</guid>
      <description>Copy from 《Hugo 主题 Nuo 文章样式预览》 这篇文章集中说明主题所支持的 Markdown 语法和 Hugo Shortcodes 插件，你也可以在这里预览到他们的样子。如果你不喜欢某些样式，可以去</description>
    </item>
    
    <item>
      <title>浅谈容器云设计</title>
      <link>http://localhost:1313/2019/06/%E6%B5%85%E8%B0%88%E5%AE%B9%E5%99%A8%E4%BA%91%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 04 Jun 2019 09:23:29 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/06/%E6%B5%85%E8%B0%88%E5%AE%B9%E5%99%A8%E4%BA%91%E8%AE%BE%E8%AE%A1/</guid>
      <description>浅谈容器项目设计 1. 容器项目的三个关键的问题 之前介绍过，我们使用声明式API来对K8s进行管理。所有对K8s内的应用的管理操作本质上都是操作这</description>
    </item>
    
    <item>
      <title>感性认识Kubernetes</title>
      <link>http://localhost:1313/2019/04/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86kubernetes/</link>
      <pubDate>Fri, 26 Apr 2019 09:14:42 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/04/%E6%84%9F%E6%80%A7%E8%AE%A4%E8%AF%86kubernetes/</guid>
      <description>kubernetes 名字太长 首先吐槽一下，Kubernetes这个项目名字，实在是太长了。其实kubernetes 可以简写k8s，有一个有趣的知识点，为什么简</description>
    </item>
    
    <item>
      <title>Golang 交叉编译速查</title>
      <link>http://localhost:1313/2019/01/golang-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Mon, 14 Jan 2019 09:11:32 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/01/golang-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E9%80%9F%E6%9F%A5/</guid>
      <description>mac Mac 下编译 Linux 64位可执行程序 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go Mac 下编译 Windows 64位可执行程序 CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go linux Linux 下编译 Mac 64位可执行程序 CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go Linux 下编译 Windows 64位可执行</description>
    </item>
    
    <item>
      <title>理解flannel网络插件原理</title>
      <link>http://localhost:1313/2018/11/%E7%90%86%E8%A7%A3flannel%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 14 Nov 2018 09:51:35 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/11/%E7%90%86%E8%A7%A3flannel%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/</guid>
      <description>需要Kubernetes网络插件的原因 kubernetes 对集群网络的要求是： 所有容器、Node节点都可以不通过NAT的方式直接访问。 谷歌的设想是，所有的容器</description>
    </item>
    
    <item>
      <title>Docker网络模型单机模拟</title>
      <link>http://localhost:1313/2018/10/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8D%95%E6%9C%BA%E6%A8%A1%E6%8B%9F/</link>
      <pubDate>Fri, 19 Oct 2018 09:35:38 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/10/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%8D%95%E6%9C%BA%E6%A8%A1%E6%8B%9F/</guid>
      <description>kubernetes 网络模型 Kubernetes网络模型设计的一个基础原则是： 每一个Pod都拥有一个独立的IP地址，而且假定所有Pod都在一个可以直接连通的、</description>
    </item>
    
    <item>
      <title>使用kubeadm 安装kubernetes1.12</title>
      <link>http://localhost:1313/2018/10/%E4%BD%BF%E7%94%A8kubeadm-%E5%AE%89%E8%A3%85kubernetes1.12/</link>
      <pubDate>Mon, 15 Oct 2018 09:40:17 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/10/%E4%BD%BF%E7%94%A8kubeadm-%E5%AE%89%E8%A3%85kubernetes1.12/</guid>
      <description>安装前准备 安装规划 主机名 IP地址 作用 kube1 172.20.1.1 Master kube10 172.20.10.1 Node Kube11 172.20.11.1 Node 系统配置 配置/etc/hosts文件 172.20.1.1 kube1 172.20.10.1 kube10 172.20.11.1 kube11 若主机开启了linux防火墙，能够阻止</description>
    </item>
    
    <item>
      <title>VUE技术分享   第一个VUE页面</title>
      <link>http://localhost:1313/2018/06/vue%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB-%E7%AC%AC%E4%B8%80%E4%B8%AAvue%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Tue, 19 Jun 2018 17:15:09 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/06/vue%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB-%E7%AC%AC%E4%B8%80%E4%B8%AAvue%E9%A1%B5%E9%9D%A2/</guid>
      <description>微医运维开发前端内部分享使用文档 运行Engine 项目 下载项目 从gitlab中克隆项目到本地 git clone git@git.guahao-inc.com:devops/engine-web.git engine-web 运行安装项目依赖 在项目目录中，安装项目开发</description>
    </item>
    
    <item>
      <title>软件版本递增管理策略</title>
      <link>http://localhost:1313/2018/06/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E9%80%92%E5%A2%9E%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</link>
      <pubDate>Tue, 05 Jun 2018 10:33:33 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/06/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E9%80%92%E5%A2%9E%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</guid>
      <description>语义化版本命名格式 V主版本号.次版本号.修订版本号 示例：v1.12.3 一些约定 主版本号：具有相同名称但不同主版本号的程序集不可互换。例如，这</description>
    </item>
    
    <item>
      <title>Restful API 接口设计规范</title>
      <link>http://localhost:1313/2018/05/restful-api-%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 07 May 2018 17:06:58 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/05/restful-api-%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</guid>
      <description>基础 API版本符合语义化版本控制 版本格式：主版本号.次版本号.修订号，版本号递增规则如下： 主版本号：当你做了不兼容的 API 修改， 次版本号：当你做</description>
    </item>
    
    <item>
      <title>Redis 配置常用配置速查</title>
      <link>http://localhost:1313/2018/03/redis-%E9%85%8D%E7%BD%AE%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Tue, 06 Mar 2018 17:27:39 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/03/redis-%E9%85%8D%E7%BD%AE%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E9%80%9F%E6%9F%A5/</guid>
      <description>启动方式 Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程 daemonize no 设置PID文件 当Redis以守护进程方式运行</description>
    </item>
    
    <item>
      <title>Swagger 速查手册</title>
      <link>http://localhost:1313/2018/01/swagger-%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</link>
      <pubDate>Thu, 18 Jan 2018 16:22:24 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/01/swagger-%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</guid>
      <description>第1章 简介 Swagger The World&amp;rsquo;s Most Popular Framework for APIs. Starting January 1st 2016 the Swagger Specification has been donated to the Open API Initiative (OAI) and is the foundation of the OpenAPI Specification. Swagger给人第一印象就是最流行，不懂Swagger咱就out</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/readme/</guid>
      <description>Typora 是我的知识库 自动化部署 自动化部署文件在.deploy/deploy.sh，通过git的钩子自动实现。使用的是pre-push钩子。
@@ -23,10 +23,6 @@ .icon-link { visibility: hidden; font-size: 16px; - - &amp;amp;:before { - vertical-align: middle; - } } } </description>
    </item>
    
  </channel>
</rss>